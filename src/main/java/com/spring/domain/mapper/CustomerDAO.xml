<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.spring.domain.CustomerDAO">

<!-- 글작성 -->
	<insert id="addUser" flushCache="true"
	parameterType="com.spring.domain.CustomerDTO">
		INSERT INTO customer
			(cus_id, cus_pw, cus_name, cus_nickname, cus_birthday, cus_profile, cus_phonenum )
		VALUES
			(#{id}, #{pw}, #{name}, #{nickname}, #{birthday}, #{profile}, #{phonenum})	
	</insert>
	
<insert id="addAuth">
		INSERT INTO authority
		VALUES(#{param2}, #{param1})
	</insert>

	<!-- 사용자 권한 전부 삭제 -->
	<delete id="deleteAuth">
		DELETE FROM authority
		WHERE cus_id = #{id}
	</delete>

	<delete id="deleteAuths">
		DELETE FROM authority
		WHERE cus_id = #{param1}
	</delete>

	<select id="findById" resultType="com.spring.domain.CustomerDTO">
		SELECT
			cus_uid uid,
			cus_id id,
			cus_pw pw,
			cus_name name, 
			cus_nickname nickname, 
			cus_birthday birthday, 
			cus_profile profile,
			cus_phonenum phonenum, 
			cus_enable enable
			
		FROM customer
		WHERE cus_id = #{id}	
	</select>

	<select id="selectAuthoritiesById" resultType="String">
		SELECT cus_auth
		FROM authority
		WHERE cus_id = #{id}
	</select>
	
	<select id="findNameByPhonenum" resultType="String">
	SELECT cus_name
	FROM customer
	WHERE cus_phonenum= #{phonenum}
	</select>

	
	<select id="idChk" resultType="String">	<!-- lit 형태로 반환 -> 없으면 null 반환 -->
		SELECT cus_id FROM customer
		WHERE cus_id = #{id}
		</select>
	<select id="findID" resultType="String">
			SELECT cus_id id FROM customer
		WHERE cus_name = #{name} and cus_phonenum=#{phonenum}
	</select>
	
	<select id="nickChk" resultType="String">
		SELECT cus_nickname FROM customer
		WHERE cus_nickname = #{nickname}
	
	</select>
	<update id="updatePw">
		UPDATE customer
		SET cus_pw =#{pw}
		WHERE cus_uid=#{uid}
	</update>
	<update id="changePw">
		UPDATE customer
		SET cus_pw =#{pw}
		WHERE cus_id= #{id} and cus_name = #{name} and cus_phonenum = #{phonenum}
	
	</update>
	<select id="selectByUid" resultType="com.spring.domain.CustomerDTO">
		SELECT
			cus_uid uid,
			cus_id id,
			cus_pw pw,
			cus_name name, 
			cus_nickname nickname, 
			cus_birthday birthday, 
			cus_phonenum phonenum,
			cus_profile profile		
			
		FROM customer
		WHERE cus_uid = #{uid}	
	</select>
	<select id="selectByUidAll" resultType="com.spring.domain.CustomerDTO">
		SELECT
			cus_uid uid,
			cus_id id,
			cus_pw pw,
			cus_name name, 
			cus_nickname nickname, 
			cus_birthday birthday, 
			cus_phonenum phonenum 
			
			
		FROM customer	
		ORDER BY 
			cus_uid DESC
		LIMIT 
			#{from}, #{pageRows}
	</select>
	<select id="count" resultType="int">
	SELECT
		count(*)
	FROM
		customer
	</select>
	
	<!-- 마이페이지 -->
	<!-- 회원정보 수정 -->
	<update id="update" flushCache="true"
		parameterType="com.spring.domain.CustomerDTO">
		UPDATE customer 
		SET cus_phonenum= #{phonenum} , cus_nickname=#{nickname}, cus_profile=#{profile}, cus_profile_origin=#{profile_origin}
		WHERE cus_uid=#{uid} 
	</update>
	
	<!-- 프로필 사진 수정하지 않은 회원정보 수정 -->
	<update id="updateNoFile" flushCache="true"
		parameterType="com.spring.domain.CustomerDTO">
		UPDATE customer 
		SET cus_phonenum= #{phonenum} , cus_nickname=#{nickname} 
		WHERE cus_uid=#{uid} 
	</update>
	
	<!-- 글 삭제하기 전에 해당 글의 첨부파일 가져오기 -->
	<select id="getFileName" flushCache="true" resultType="String">
		SELECT 
			cus_profile 
		FROM 
			customer
		WHERE 
			cus_id = #{id}
	</select>
	
	<!-- 회원 탈퇴 => 비활성화 시키기 -->
	<update id="deleteUser">
		UPDATE customer SET cus_enable = 0
		WHERE cus_id = #{id}
	</update>	
	
</mapper>